[{"C:\\Users\\ericn\\Downloads\\pokedex\\pokedex\\src\\index.js":"1","C:\\Users\\ericn\\Downloads\\pokedex\\pokedex\\src\\App.js":"2"},{"size":219,"mtime":1646085091618,"results":"3","hashOfConfig":"4"},{"size":4001,"mtime":1646179872891,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","suppressedMessages":"8","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"bqzdoq",{"filePath":"9","messages":"10","suppressedMessages":"11","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12"},"C:\\Users\\ericn\\Downloads\\pokedex\\pokedex\\src\\index.js",[],[],"C:\\Users\\ericn\\Downloads\\pokedex\\pokedex\\src\\App.js",["13","14","15"],[],"import \"./index.css\";\n//Import React & useState\nimport React, { useState, useEffect } from \"react\";\nimport Logo from \"./data/placeholder.jpg\";\nfunction App() {\n  //State Of Search Bar, set default to empty string\n  const [newPokemon, setNewPokemon] = useState(\"\");\n  //State Of Returned Pokemon, set default to empty object\n  const [pokemon, setPokemon] = useState({\n    id: undefined,\n    name: \"\",\n    type: \"\",\n    hp: \"\",\n    attack: \"\",\n    defense: \"\",\n  });\n  //Pokemon Image State, set default to question mark\n  const [pokemonImage, setPokemonImage] = useState(Logo);\n\n  const fetchPokemonData = async () => {\n    try {\n      const response = await fetch(\n        `https://pokeapi.co/api/v2/pokemon/${newPokemon}`\n      );\n      const pokemonData = await response.json();\n      const pokemonID = pokemonData.id;\n      const pokemonName = pokemonData.name;\n      const typeObject = pokemonData.types[0];\n      const pokemonType = typeObject.type.name;\n      const pokemonHP = Math.floor(Math.random() * 100);\n      const pokemonAttack = Math.floor(Math.random() * 100);\n      const pokemonDefense = Math.floor(Math.random() * 100);\n      const pokemonImage = pokemonData.sprites.front_default;\n      setPokemon({\n        id: pokemonID,\n        name: pokemonName[0].charAt(0).toUpperCase() + pokemonName.slice(1),\n        type: pokemonType.charAt(0).toUpperCase() + pokemonType.slice(1),\n        hp: pokemonHP,\n        attack: pokemonAttack,\n        defense: pokemonDefense,\n      });\n      setPokemonImage(pokemonImage);\n    } catch (error) {\n      console.log(\"Failed to fetch\" + error);\n    }\n  };\n\n  const handleSearch = () => {\n    if (newPokemon == \"\") {\n      alert(\"Please Enter A Pokemon To Continue!\");\n    }\n    fetchPokemonData();\n  };\n\n  useEffect(() => {\n    fetchPokemonData();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <h1>Pokédex</h1>\n      <p>(Created /w ReactJS, APIs & Boostrap).</p>\n      <div id=\"mainContainer\">\n        <div className=\"input-group\">\n          <input\n            type=\"search\"\n            className=\"form-control rounded\"\n            placeholder=\"Search For A Pokémon\"\n            value={newPokemon.charAt(0).toUpperCase() + newPokemon.slice(1)}\n            onChange={(e) => {\n              const userInput = e.target.value;\n              const convertedUserInput =\n                userInput.charAt(0).toLowerCase() + userInput.slice(1);\n              setNewPokemon(convertedUserInput);\n            }}\n          />\n          <button\n            type=\"button\"\n            className=\"btn btn-primary\"\n            onClick={handleSearch}\n          >\n            Search\n          </button>\n        </div>\n        <div id=\"topContainer\">\n          <div id=\"imgContainer\">\n            <img className=\"images\" src={pokemonImage} />\n          </div>\n          <div className=\"genericCard\" id=\"nameContainer\">\n            <div className=\"label\">Name</div>\n            <div className=\"value\" key={pokemon.id}>\n              {pokemon.name}\n            </div>\n          </div>\n          <div className=\"genericCard\" id=\"typeConatiner\">\n            <div className=\"label\">Type</div>\n            <div className=\"value\" key={pokemon.id}>\n              {pokemon.type}\n            </div>\n          </div>\n        </div>\n\n        <div id=\"bottomContainer\">\n          <div className=\"bottomGenericCard\">\n            <div className=\"label\">HP</div>\n            <div className=\"value\" key={pokemon.id}>\n              {pokemon.hp}\n            </div>\n          </div>\n          <div className=\"bottomGenericCard\">\n            <div className=\"label\">Attack</div>\n            <div className=\"value\" key={pokemon.id}>\n              {pokemon.attack}\n            </div>\n          </div>\n          <div className=\"bottomGenericCard\">\n            <div className=\"label\">Defense</div>\n            <div className=\"value\" key={pokemon.id}>\n              {pokemon.defense}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n",{"ruleId":"16","severity":1,"message":"17","line":49,"column":20,"nodeType":"18","messageId":"19","endLine":49,"endColumn":22},{"ruleId":"20","severity":1,"message":"21","line":57,"column":6,"nodeType":"22","endLine":57,"endColumn":8,"suggestions":"23"},{"ruleId":"24","severity":1,"message":"25","line":87,"column":13,"nodeType":"26","endLine":87,"endColumn":58},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchPokemonData'. Either include it or remove the dependency array.","ArrayExpression",["27"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",{"desc":"28","fix":"29"},"Update the dependencies array to be: [fetchPokemonData]",{"range":"30","text":"31"},[1805,1807],"[fetchPokemonData]"]